	在一个数组中，如果只有一个元素只存在一次，其余元素都存在两次，如何在空间为O(1)的复杂度下找出那个只出现一次的元素，比如a[] = {1,3,3,5,1},则答案是5
解法为异或操作：
int findAppearOnlyOnce()
{
	int array[] = {
		1,3,5,7,7,1,5
	};
	int val = 0;
	for(int i=0; i<7; i++)
		val ^= array[i];
	return val;
}
这是根据异或的性质来解决的，在二进制上，两个位相同的情况下异或后为0，所以该数组中，1^1,5^5,7^7都为0，所以剩下的结果就是3了。

	如果有两个元素只存在一次，而其余元素都存在两次呢？
这时单靠异或就无法成功了，比如有a[] = {1,3,5,7,7,1},异或的结果就是3^5
解法：
依然根据异或得到3^5的值，我们假定需要的两个数是x和y,计算出x^y的二进制值后，找出从低位到高位的第一个为1的位置。由于这个1的存在，必然是x在该位上是1而y在该位上是0，或者是x在该位上是0而y在该位上是1.这时可把原数组分成两个部分，一部分在该位上是0，另一部分在该位上是1，最终分别异或这两个部分，得到的就是答案。
void findTwoAppearOnlyOnce(int &first,int &second)
{
	int array[] = {
		1,3,5,7,7,1
	};
	int val = 0;
	for(int i=0; i<6; i++)
		val ^= array[i];
	int left;
	for(left = 0; (1<<left) <= val; left++)
		if((val>>left) & 1)
			break;
	first = second = 0;
	for(int i=0; i<6; i++)
	{
		if((array[i]>>left) & 1)
			first ^= array[i];
		else
			second ^= array[i];
	}
}
