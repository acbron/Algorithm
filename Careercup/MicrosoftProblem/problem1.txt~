1.把二元查找树转变成排序的双向链表
题目：
输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。
要求不能创建任何新的结点，只调整指针的指向。
10
/ \
6 14
/ \ / \
4 8 12 16
转换成双向链表
4=6=8=10=12=14=16。
首先我们定义的二元查找树节点的数据结构如下：
struct BSTreeNode
{
int m_nValue; // value of node
BSTreeNode *m_pLeft; // left child of node
BSTreeNode *m_pRight; // right child of node
};

首先，自定义struct里多了一个parent指针，用于查找successor和predecessor
struct Node
{
	int val;
	Node *lson,*rson,*parent;
	Node(){}
	Node(int v,Node *l,Node *r,Node *p):val(v),lson(l),rson(r),parent(p){}
}*root,*ptr;

Node* getMaxi(Node *node)
{
	while(node->rson)
		node = node->rson;
	return node;
}

Node* getMini(Node *node)
{
	while(node->lson)
		node = node->lson;
	return node;
}

Node* successor(Node *node)
{
	if(node->rson)
		return getMini(node->rson);
	Node *fa = node->parent;
	while(fa && fa->lson != node)
	{
		node = fa;
		fa = node->parent;
	}
	return fa;
}

Node* predecessor(Node *node)
{
	if(node->lson)
		return getMaxi(node->lson);
	Node *fa = node->parent;
	while(fa && fa->rson != node)
	{
		node = fa;
		fa = node->parent;
	}
	return fa;
}
//转换过程略显繁琐，且不合题意要求的struct
void work()
{
	Node *start,*end;
	Node *now,*pre = NULL,*tmp;
	ptr = root;
	tmp = getMini(ptr);
	start = tmp;
	now = tmp;
	while(now != root)
	{
		ptr = successor(tmp);
		now->lson = pre;
		now->rson = ptr;
		pre = now;
		now = ptr;
		tmp = now;
	}
	now->lson = pre;
	ptr = root;
	tmp = getMaxi(ptr);
	end = tmp;
	pre = NULL;
	now = tmp;
	while(now != root)
	{
		ptr = predecessor(tmp);
		now->rson = pre;
		now->lson = ptr;
		pre = now;
		now = ptr;
		tmp = now;
	}
	now->rson = pre;
	ptr = start;
	while(ptr)
	{
		cout << ptr->val << " ";
		ptr = ptr->rson;
	}
	cout << endl;
	ptr = end;
	while(ptr)
	{
		cout << ptr->val << " ";
		ptr = ptr->lson;
	}
	cout << endl;
}

正解：
BSTreeNode* tree_to_LinkedList(BSTreeNode *root)
{
	BSTreeNode *head,*tail;
	construct(head,tail,root);
	return head;
}

void construct(BSTreeNode *&head,BSTreeNode *&tail,BSTreeNode *root)
{
	if(!root)
	{
		head = NULL;
		tail = NULL;
		return;
	}
	BSTreeNode *t_head,*t_tail;
	construct(head,t_tail,root->m_pLeft);
	construct(t_head,tail,root->m_pRight);
	if(!t_tail)
		head = root;
	else
	{
		t_tail->m_pRight = root;
		root->m_pLeft = t_tail;
	}
	if(!t_head)
		tail = root;
	else
	{
		t_head->m_pLeft = root;
		root->m_pRight = t_head;
	}
}
