30.在从 1 到 n 的正数中 1 出现的次数
输入一个整数 n,求从 1 到 n 这 n 个整数的十进制表示中 1 出现的次数。
例如输入 12, 1 到 12 这些整数中包含 1 的数字有 1, 11 和 12, 一共出现了 5 次。
这是一道广为流传的 google 面试题。

分析：
考虑N=65536
可以把N分成两部分，分别是1~5536和5537~65536
(1)先只查看万位，其他位暂且不管。如果万位大于1，则10000~19999有10000个数包含1。如果万位
等于1，假如是N是15536，很明显万位含1的个数是5537个。即10000~15536
(2)从5537~65536，可以分解成5537~15536,15537~25536,...,55537~65536，共6个区间(最高位为6），
每个区间都有10000个数，这时考虑万位以下的，4个位置（千位数是4位）任意位置取1，剩余位置可以取便0~9，则有6*4*10^3
，这里6代表6个区间，4代表四个位，10^3是其余三位随意取
(3)递归下去，计算1~5536有多少个。

int powerOfTen(int len)
{
	int ret = 1;
	for(int i=1; i<=len; i++)
		ret *= 10;
	return ret;
}

int calculate(char *str)
{
	if(!str || *str == '\0')
		return 0;
	int len = (int)strlen(str);
	if(len == 1 && *str == '0') return 0;//边界判断
	if(len == 1 && *str != '0') return 1;//同上
	int high = 0,mid,low;
	if(*str == '1') //
		high = atoi(str+1)+1;
	else if(*str > '1')
		high = powerOfTen(len-1);
	mid = ((*str)-'0')*powerOfTen(len-2)*(len-1);
	++str;
	low = calculate(str);
	return low+mid+high;
}

int countOne(int n)
{
	const int N = 32;
	char str_n[N];
	sprintf(str_n,"%d",n);
	int ret = calculate(str_n);
	return ret;
}
