15.输入一颗二元查找树,将该树转换为它的镜像,
即在转换后的二元查找树中,左子树的结点都大于右子树的结点。
用递归和循环两种方法完成树的镜像转换。

//递归版本
Node *convert(Node *p)
{
	if(!p)
		return NULL;
	Node *left = convert(p->lson);
	Node *right = convert(p->rson);
	p->lson = right;
	p->rson = left;
	return p;
}

//循环版本，其实也是用栈模拟递归。类似广度优先搜索
void convertNonRecursion(Node *p)
{
	stack <Node*> S;
	S.push(p);
	while(!S.empty())
	{
		Node *cur = S.top();
		S.pop();
		Node *left = cur->lson;
		Node *right = cur->rson;
		cur->lson = right;
		cur->rson = left;
		if(cur->lson)
			S.push(cur->lson);
		if(cur->rson)
			S.push(cur->rson);
	}
}
