题目：求菲波那契的第N项

typedef long long LL;

//方法一：递归，不推荐，容易栈溢出，且速度较慢。
LL fibonacciRecursion(int n)
{
	if(n <= 1)
		return n;
	return fibonacciRecursion(n-1)+fibonacciRecursion(n-2);
}

//方法二：循环，较实用
LL fibonacciNoRecursion(int n)
{
	if(n <= 1)
		return n;
	LL pre1 = 1,pre2 = 0;
	LL ret = 0; 
	for(int i=2; i<=n; i++)
	{
		ret = pre1+pre2;
		pre2 = pre1;
		pre1 = ret;
	}
	return ret;
}

//方法三：矩阵快速幂,(fn,fn-1,fn-1,fn-2) = (1,1,1,0)^(n-1)
struct Matrix
{
	LL m[3][3];
	Matrix()
	{
		m[1][1] = m[1][2] = m[2][1] = m[2][2] = 0;
	}
	Matrix(int a,int b,int c,int d)
	{
		m[1][1] = a,m[1][2] = b,m[2][1] = c,m[2][2] = d;
	}
};

Matrix multiply(const Matrix &lhs,const Matrix &rhs)
{
	Matrix ret;
	for(int i=1; i<=2; i++)
		for(int j=1; j<=2; j++)
			for(int k=1; k<=2; k++)
				ret.m[i][j] += lhs.m[i][k]*rhs.m[k][j];
	return ret;
}

LL fastPower(Matrix lhs,int n)
{
	Matrix ret(1,0,0,1);
	while(n)
	{
		if(n & 1)
			ret = multiply(ret,lhs);
		n >>= 1;
		lhs = multiply(lhs,lhs);
	}
	return ret.m[1][1];
}
