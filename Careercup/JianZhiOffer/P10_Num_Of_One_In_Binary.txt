题目：请实现一个函数，输入一个整数，输出该数二进制表示中
1的个数。

//方法一：每次判断最后一位是否为1。但可能引起死循环，因为如果
n是负数，其高位必须保证是1。
int getOne_1(int n)
{
	int ret = 0;
	while(n)
	{
		if(n & 1)
			ret ++;
		n >>= 1;
	}
	return ret;
}

//方法二：较为一般的方法，对于整型，最多计算32次。
int getOne_2(int n)
{
	int ret = 0;
	int flag = 1;
	while(flag)
	{
		if(n & flag)
			++ret;
		flag <<= 1;
	}
	return ret;
}

//方法三：较好的方法，函数流程是这样的：如果n不为0，则肯定存在某个位是1，这时
++ret，对于n&(n-1)其实就是把在最右边的1改为0。考虑n=1011,则n-1=1010，经过运算
后变成1010了。再考虑n=1100，则n-1=1011，运算后的结果为1000。
int getOne_3(int n)
{
	int ret = 0;
	while(n)
	{
		++ret;
		n = (n&(n-1));
	}
	return ret;
}
