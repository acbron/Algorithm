题目：把数一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的
旋转。输入一个递增排序的数组的旋转，输出旋转数组的最小元素。例如
数组{3,4,5,1,2}是数组{1,2,3,4,5}的一个旋转，最小元素是1

有若干种情况需要考虑：
1.{1,2,3,4,5}
2.{1}
3.{1,1,1,1,1}
4.{1,0,1,1,1}这种情况下二分无法得到答案
4.{3,4,5,1,2}最普通的版本，有个规律是，旋转过后，该数组变成了两个递增序列的组合，这是二分的关键。
	     根据array[mid]和array[low]的大小关系，可以判定出mid属于哪个递增序列，同理high和
	     mid也有同样的关系可以得出结论。

int getMin(int *array,int count) //O(n)从头开始找
{
	int ret = array[0];
	for(int i=1; i<count; i++)
		if(array[i] < ret)
			ret = array[i];
	return ret;
}

int findMinimun(int *array,int count)
{
	if(array == NULL || count <= 0)
		throw range_error("The array is empty");
	if(array[0] < array[count-1])
		return array[0];
	int low = 0, high = count-1;
	while(low < high)
	{
		if(low + 1 == high)
			break;
		int mid = (low + high) >> 1;
		if(array[low] == array[mid] && array[high] == array[mid]) //数组中含重复数字，非严格递增的情况
			return getMin(array,count);
		if(array[low] <= array[mid])
			low = mid;
		if(array[high] >= array[mid])
			high = mid;
	}
	return array[high];
}
