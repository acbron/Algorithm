逆序数：如果存在正整数i,j使得1<=i<=j<=n，并且a[i]>a[j]，则称<a[i],a[j]>这个有序对称为a的一个逆序对，也称为逆序数(维基百科,zh.wikipedia.org/wiki/逆序对)
例如：数组<2,3,8,6,1>的逆序数有<2,1>,<3,1>,<8,6>,<8,1>,<6,1>共5个
这里主要记录求解逆序数的三种方法
<1>归并排序
时间复杂度O(NlogN),空间复杂度O(N)
void merge(int low,int mid,int high,int &ans)
{
	int i = low,j = mid+1,k = low;
	while(i <= mid && j <= high)
	{
		if(first[i] <= first[j]) //first[]为原始数组
			temp[k++] = first[i++];
		else
		{
			temp[k++] = first[j++];
			ans += (mid-i+1); //在first[]从i~mid的所有值都是比first[j]大的
		}
	}
	while(i <= mid)
		temp[k++] = first[i++];
	while(j <= high)
		temp[k++] = first[j++];
	for(int i=low; i<=high; i++)
		first[i] = temp[i];
}

void MergeSort(int a,int b)
{
	if(a < b)
	{
		int mid = (a+b) >> 1;
		MergeSort(a,mid);
		MegeSort(mid+1,b);
		merge(a,mid,b);
	}
}

<2>树状数组(Binary Index Tree)
思路：
将原数组去掉重复的元素并升序排序得到一个新的数组temp[]，属于离散化操作
枚举原数组，对于当前元素，二分查找它在temp[]中的位置，这便是它在原数组中升序情况下“排在第几”
由于按原数组的序列遍历，则逆序数为 当前已枚举的数的个数-在该位置前存在多少个数-1(这个1是指它自己)
然后更新操作，在当前元素所属位置上标记它的存在
时间复杂度O(NlogN)，空间复杂度O(N)
int lowbit(int x)
{
	return x&(-x);
}

void update(int p,int x)
{
	for(int i=p; i<=n; i+=lowbit(i))
		sum[i] += x; //sum[i]表示在i之前有多少个数
}

int getSum(itn p)
{
	int ret = 0;
	for(int i=p; i>0; i-=lowbit(i))
		ret += sum[i];
	return ret;
}

int binarySearch(int x,int len)
{
	int low = 1,high = len;
	while(low <= high)
	{
		int mid = (low+high) >> 1;
		if(temp[mid] < x)
			low = mid+1;
		else if(temp[mid] > x)
			high = mid-1;
		else
			return mid;
	}
	return -1;
}

//array为原数组，temp一开时跟原数组一样，通过unique()去重
int getReverseNumber()
{
	sort(temp+1,temp+1+n);
	int len = unique(temp+1,temp+1+n)-(temp+1);
	int ans = 0;
	for(int i=1; i<=n; i++)
	{
		int pos = binarySearch(array[i],len);
		ans += (i-getSum(pos-1)-1);
		update(pos,1);
	}
	return ans;
}

<3>线段树(Segment Tree)
通常能用树状数组解决的问题，用线段树自然也可以。只不过在这里稍微有点“大才小用”
思路与<2>一样，时间复杂度O(NlogN),空间复杂度O(4*N)= O(N)，常数较大

#define ls l,mid,rt<<1
#define rs mid+1,r,rt<<1|1

//sum[rt]代表区间l,r之间的数的个数和
void update(int l,int r,int rt,int v)
{
    sum[rt] ++;
    if(l == r)
        return;
    int mid = (l + r) >> 1;
    if(v <= mid)update(ls,v);
    else update(rs,v);
}

int query(int l,int r,int rt,int L,int R)
{
    if(L <= l && r <= R)
        return sum[rt];
    int mid = (l + r) >> 1;
    int ret = 0;
    if(L <= mid)ret += query(ls,L,R);
    if(R > mid)ret += query(rs,L,R);
    return ret;
}

int binarySearch(int tar)
{
    int low = 1, high = len;
    while(low <= high)
    {
        int mid = (low + high) >> 1;
        if(temp[mid] > tar)
            high = mid - 1;
        else if(temp[mid] < tar)
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}

int getReverseNumber()
{
   //此处省去temp[]的构造
    int ans = 0;
    for(int i=1; i<=n; i++)
    {
	int pos = binarySearch(array[i]);
	ans += query(1,len,1,L,len);
	update(1,len,1,pos);
    }
    return ans;
}
